import { Command } from "../../Command";
import { Message } from "discord.js";
import { settings } from "../../Bot";
import { getStatus } from "mc-server-status";

export default class Status extends Command {
  public constructor() {
    super("status", {
      name: "status",
      aliases: ["status"],
      category: "Misc",
      description: {
        content: "View the current online/offline status and player count.",
        usage: "status",
        examples: ["status"],
      },
      args: [{
        id: 'srv',
        type: 'string',
        match: 'rest'
      }],
      channel: 'guild',
      clientPermissions: ["EMBED_LINKS"],
      ratelimit: 3,
    });
  }

  public async exec(message: Message, args: any): Promise<any> {
    let name = settings.info.name;
    let ip = settings.info.ip;
    let port = settings.info.port;
    //const server = settings.info.servers.find((v) => v.fancyName === args.srv || v.name === args.srv.ignoreCase);
	const server = settings.info.servers.find((v) => v.fancyName.toLowerCase() === args.srv?.toLowerCase() || v.name.toLowerCase() === args.srv?.toLowerCase());
    if(!!args.srv && !server) {
      return message.channel.send({
        embed: {
          color: 'RANDOM',
          fields: [
            {
              name: 'Error',
              value: 'Invalid sub-server specified.'
            }
          ]
        }
      })
    }
    if(!!server) {
      name = server.fancyName;
      ip = server.ip;
      port = server.port;
    }
    const status = await getStatus(ip, port).catch(() => {});
    if(!status) {
      return message.channel.send({
        embed: {
          color: 'RED',
          fields: [
            {
              name,
              value: '**Status:** `Offline`'
            }
          ],
          footer: {
            //text: 'IP: ' + ip + ((port === 25565)?(''):(':' + port))
          }
        }
      });
    } else {
      return message.channel.send({
        embed: {
          color: 'GREEN',
          fields: [
            {
              name,
              value: `**Status:** Online\n**Players:** ${status.players.online} / ${status.players.max}`
            }
          ],
          footer: {
            //text: 'IP: ' + ip + ((port === 25565)?(''):(':' + port))
          }
        }
      });
    }
  }
}